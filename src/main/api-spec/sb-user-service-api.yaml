openapi: "3.0.3"
info:
  version: 1.0.1
  title: The user service API

tags:
  - name: users
    description: Operations about users

paths:
  /users:
    get:
      summary: Retrieve a list of users
      operationId: getUsers
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: An array of users (paged)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
        503:
          description: Service Unavailable
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Unique username for the user.
                  maxLength: 64
                  minLength: 8
                  example: "johndoe123"
                email:
                  type: string
                  description: Email address of the user.
                  format: email
                  example: "johndoe123@gmail.com"
                firstName:
                  type: string
                  description: First name of the user.
                  example: "John"
                lastName:
                  type: string
                  description: Last name of the user.
                  example: "Doe"
              required:
                - username
                - email
                - firstName
                - lastName
      responses:
        201:
          description: User created
          headers:
            Location:
              description: The location of the created user
              schema:
                type: string
                format: uri
                example: "/users/f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        409:
          description: Conflict
        503:
          description: Service Unavailable

  /users/{userId}:
    get:
      summary: Retrieve a user by ID
      operationId: getUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
        503:
          description: Service Unavailable
    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address to update to.
                  format: email
                  example: "johndoe123@gmail.com"
                firstName:
                  type: string
                  description: First name to update to.
                  example: "John"
                lastName:
                  type: string
                  description: Last name to update to.
                  example: "Doe"
                gender:
                  type: string
                  enum:
                    - MALE
                    - FEMALE
                    - OTHER
                  description: Gender of the user
                  example: "MALE"
                phone:
                  type: string
                  description: Phone number of the user.
                  example: "1234567890"
                birthDate:
                  type: string
                  format: date
                  description: Birth date of the user. Format is "YYYY-MM-DD" (ISO 8601).
                  example: "1990-01-01"
              required:
                - email
      responses:
        200:
          description: User updated
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
        409:
          description: Conflict
        503:
          description: Service Unavailable

    patch:
      summary: Partially update a user by ID
      operationId: patchUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address to update to.
                  format: email
                  example: "johndoe123@gmail.com"
                firstName:
                  type: string
                  description: First name to update to.
                  example: "John"
                lastName:
                  type: string
                  description: Last name to update to.
                  example: "Doe"
                gender:
                  type: string
                  enum:
                    - MALE
                    - FEMALE
                    - OTHER
                  description: Gender of the user
                  example: "MALE"
                phone:
                  type: string
                  description: Phone number of the user.
                  example: "1234567890"
                birthDate:
                  type: string
                  format: date
                  description: Birth date of the user. Format is "YYYY-MM-DD" (ISO 8601).
                  example: "1990-01-01"
      responses:
        200:
          description: User updated
        400:
          description: Bad Request
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
        409:
          description: Conflict
        503:
          description: Service Unavailable

    delete:
      summary: Delete a user by ID
      operationId: deleteUserById
      tags:
        - users
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        204:
          description: User deleted
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found
        503:
          description: Service Unavailable

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user (UUID).
          example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
        username:
          type: string
          description: Unique username for the user.
          maxLength: 64
          minLength: 8
          example: "johndoe123"
        email:
          type: string
          description: Email address of the user.
          format: email
          example: "johndoe@gmail.com"
        firstName:
          type: string
          description: First name of the user.
          example: "John"
        lastName:
          type: string
          description: Last name of the user.
          example: "Doe"
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - OTHER
          description: Gender of the user
          example: "MALE"
        phone:
          type: string
          description: Phone number of the user.
          example: "1234567890"
        birthDate:
          type: string
          format: date
          description: Birth date of the user. Format is "YYYY-MM-DD" (ISO 8601).
          example: "1990-01-01"
  parameters:
    offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        format: int32
        default: 0
        example: 0
    limit:
      name: limit
      in: query
      description: The number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        example: 20
    userId:
      name: userId
      in: path
      description: ID of the user to retrieve.
      required: true
      schema:
        type: string
        example: "f7b3f1b1-5b7b-4b3b-8b3b-7b3b1f7b3b1f"
